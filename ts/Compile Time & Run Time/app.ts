// js로만 개발할 경우 런타임과 컴파일 타임이라는 개념이 구분되지 않는다. (js코드는 브라우저에서 동작하기 때문에 런타임과 컴파일 타임의 코드가 똑같다.)
// 하지만 ts는 js로 변경하는 컴파일 타임과 실행되는 런타임이 명확히 구분된다.

// 하지만 ts가 완벽하게 에러를 잡지 못하는 경우가 발생한다.(ts는 js로 컴파일되고 그 다음 런타임에서 실행되는데, 런타임의 에러까지 잡지 못하는 경우가 발생함)
// 더 자세히 설명하면 ts가 js로 컴파일되어 브라우저 상에서 js코드로 실행된다면 이 런타임 환경에서는 타이핑이 사라진 js코드만 남게되고
// 이때 데이터를 받아(json을 받아오는 것 처럼) js코드에 넣게되면 아무런 타입 방어를 할 수 없다.(타이핑이 모두 제거된 js코드만 남았기 때문에)

// 이러한 경우를 개발자는 인지하고 이를 대비한 코드를 작성해야한다.

// 이러한 상황이 발생하는 예시 코드
function add(x: number, y: number): number {
    return x + y;
}

type ObjType ={
    x: number;
    y: number;
}

// 서버로 부터 json 데이터를 받아 실행하는 상황이라 가정하면 이 데이터는 런타임에 가져와 진다.
// 하지만 런타임에는 타이핑이 모두 제거된 js코드만 남았으므로 아래처럼 value가 문자열인 데이터가 와도 에러가 발생하지 않는다.
const json = `{"x":"abc", "y":20}`;

const obj: ObjType = JSON.parse(json) as ObjType;
add(10, 20);

// 간단한 방어 코드
if(typeof(obj.x) === 'number' && typeof(obj.y) === 'number'){
    add(obj.x, obj.y)
}

// 이처럼 외부로부터 데이터를 받아오는 경우에는 방어코드를 작성해야 한다.
// 이 예제에서는 if문을 통해 value의 typeof가 number인지를 체크하고 넘어가야한다.

