{"mappings":"AAAA,iCAAe;AACG,sBAAN;AACF,SAAD,KAAK,GAAG,EAAE;AACnB,uBAAa;AACH,MAAJ,KAAK,GAAG,WAAW,EAAE,AAAC;AAC5B,yDAA2B;AACG,MAAxB,KAAK,GAAG,IAAM,EAAE,AAAC;AACvB,yDAA2B;AAEG,8FAAsB;AAEV,8DAAR;AACN,oEAAQ;AACJ,SAAvB,IAAI,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAC;IACzC,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IAC5C,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;CAC1B;AACD,IAAI,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;AAC/B,8BAA8B;AAC9B,qFAAkF;AAC/E,6HAAwD;AACO,0HAAV;AAEU,0BAAtD;AACE,gGAAoC;AACJ,MAAxC,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,GAAK;IAAE,OAAO,CAAC,GAAG,CAAC,CAAA;CAAE;AACvC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,CAAC,CAAK,IAAI;AAChC,MAAM,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,GAAK,CAAC,GAAG,CAAC,AAAC;AAC7B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,EAAC,EAAE,CAAC,CAAC,CAAC,CAAG,KAAK;AACjC,+IAAiE;AACa,IAA1E,IAAI,GAAG,KAAK,AAAC;AACjB,IAAI,IAAI,GAAG;IACP,IAAI,EAAG,KAAK;IACZ,OAAO,EAAG,WAAU;QAChB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAC1B;CACJ,AAAC;AACF,IAAI,CAAC,OAAO,EAAE,CAAC,CAAK,0GAA0D;AAE9B,IAA5C,KAAK,GAAG,KAAK,AAAC;AAClB,IAAI,KAAK,GAAG;IACR,KAAK,EAAG,KAAK;IACb,OAAO,EAAE,IAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC;CACzC,AAAC;AACF,KAAK,CAAC,OAAO,EAAE,CAAC,CAAK,kHAA4D","sources":["Documents/ES6_practice/js/function.js"],"sourcesContent":["// 함수의 표현방법 3가지\r\n// 1. 함수 선언문\r\nfunction func1() {}\r\n// 2. 함수 표현식 \r\nconst func2 = function() {};\r\n// 3. 화살표 함수(함수 표현식의 한 종류임)\r\nconst func3 = () => {};\r\n// 호이스팅, this바인딩 등에서 차이가 생김\r\n\r\n// 함수에서 return값을 주지 않으면 기본적으로 return undefined가 있는것임\r\n\r\n// 매개변수(parameter) : 함수 선언시 주어지는 값\r\n// 인수(argument) : 함수 호출시 매개변수에 들어갈 값\r\nfunction func(param1, param2, param3, param4){\r\n    console.log(param1, param2, param3, param4);    \r\n    console.log(arguments);         \r\n}\r\nfunc('argu1', 'argu2', 'argu3')\r\n// argu1 argu2 argu3 undefined\r\n// Arguments(3) ['argu1', 'argu2', 'argu3', callee: ƒ, Symbol(Symbol.iterator): ƒ]\r\n// 매개변수와 인수의 개수는 달라도됨. (인수가 부족하면 undefined반환, 인수가 더 많으면 무시)\r\n// 함수 내에선 arguments란 변수를 사용할 수 있는데 내부엔 호출한 함수의 인수들이 들어있음\r\n\r\n// 화살표 함수 특징\r\n// 1. 화살표 함수 다음에 바로 return값이 오면 {} 생략가능, () 도 사용가능\r\nconst add1 = (x, y) => { return x + y }\r\nconsole.log(add1(3,5));     // 8\r\nconst add2 = (x, y) => x + y;\r\nconsole.log(add2(10,20));   // 20\r\n// 2. 다른 함수 선언과 다르게 this 바인딩이 정적으로 결정된다. (선언한 화살표 함수의 상위 스코프에 연결)\r\nvar name = 'yun';\r\nvar info = {\r\n    name : 'kim',\r\n    getName : function(){\r\n        console.log(this.name);\r\n    },\r\n};\r\ninfo.getName();     // .을 기준으로 getName의 상위 스코프인 info를 this로 바인딩하여 'kim'이 출력된다.\r\n\r\nvar name2 = 'yun';\r\nvar info2 = {\r\n    name2 : 'kim',\r\n    getName: () => console.log(this.name2),\r\n};\r\ninfo2.getName();     // this가 정적으로 바인딩되어 info2의 상위 스코프인 window를 가리키고 'yun'이 출력된다.\r\n\r\n"],"names":[],"version":3,"file":"index.044e8dcd.js.map","sourceRoot":"/__parcel_source_root/"}