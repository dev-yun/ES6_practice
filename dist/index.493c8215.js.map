{"mappings":"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","sources":["Documents/ES6_practice/js/asynchronous.js"],"sourcesContent":["// 1. 동기, 비동기\r\n// 동기 : Thread가 작업의 순서대로 하나씩 실행하는 방법 (javascript는 싱글 스레드라서 기본적으로 병행처리가 불가능함)\r\n// 비동기 : Thread가 순서대로 실행하지 않고 JS 엔진의 Call Stack와 브라우저엔진, callback Queue를 사용하여 병행처리하는 방법\r\n// setTimeout을 이용한 비동기 처리 (165라인, 163라인, 162라인 순으로 실행)\r\nfunction taskA(a, b, cb){\r\n  setTimeout(() => {\r\n    const result = a + b;\r\n    cb(result);\r\n  }, 3000);\r\n}\r\nfunction taskB(a, cb){\r\n  setTimeout(() => {\r\n    const result = a * a;\r\n    cb(result);\r\n  }, 1000);\r\n}\r\nfunction taskC(a, b, cb){\r\n  setTimeout(() => {\r\n    const result = a - b;\r\n    cb(result);\r\n  }, 2000);\r\n}\r\n// 비동기 실행을 통해 taskB -> taskC -> taskA 순으로 실행\r\ntaskA(3, 4, (result) => {console.log(\"taskA 결과 값 : \", result)});\r\ntaskB(3, (result) => {console.log(\"taskB 결과 값 : \", result)});\r\ntaskC(3, 4, (result) => {console.log(\"taskC 결과 값 : \", result)});\r\n\r\n// 비동기처리의 값을 또다른 비동기처리의 값으로 전달 (콜백 지옥에 빠질 수 있음) => promise, async 등을 사용\r\ntaskA(5, 4, (a_result)=>{\r\n  console.log(\"taskA 결과 값 : \", a_result);\r\n  taskB(a_result, (b_result)=>{\r\n    console.log(\"taskB 결과 값 : \", b_result);\r\n    taskC(a_result, b_result, (c_result) => {\r\n      console.log(\"taskC 결과 값 : \", c_result)\r\n    })\r\n  })\r\n})\r\n\r\nconsole.log(\"코드 끝\");\r\n\r\n// 2. promise : 비동기 처리를 더 간단하고 직관적으로 돕는 문법\r\n\r\n// 2.1 resolve, reject : 비동기 처리의 성공, 실패시 출력값을 결정\r\n// 대기(pending)상태에서 해결(resolve)시 성공(Fulfilled), 거부(reject)시 Rejected상태가 되고 종료됨\r\n// \r\nfunction isPositive(number,resolve, reject){\r\n  setTimeout(()=>{\r\n    if(typeof number === \"number\"){\r\n      // 성공시 resolve\r\n      resolve(number >= 0 ? \"양수\" : \"음수\")\r\n    }\r\n    else {\r\n      // 실패시 reject\r\n      reject(\"주어진 값이 숫자가 아닙니다.\")\r\n    }\r\n  }, 2000);\r\n}\r\n\r\n// isPositive(10, \r\n//   (result)=>{\r\n//   console.log(\"성공적으로 수행됨 : \", result)\r\n//   },\r\n//   (error)=>{\r\n//     console.log(\"실패 하였음 : \", error);\r\n//   });\r\n\r\nfunction isPositiveP(number){\r\n  const executor = (resolve, reject) => {\r\n    setTimeout(()=>{\r\n      if(typeof number === \"number\"){\r\n        // 성공시 resolve\r\n        resolve(number >= 0 ? \"양수\" : \"음수\")\r\n      }\r\n      else {\r\n        // 실패시 reject\r\n        reject(\"주어진 값이 숫자가 아닙니다.\")\r\n      }\r\n    }, 2000);\r\n  };\r\n  const asyncTask = new Promise(executor);\r\n  return asyncTask;\r\n}\r\n\r\nconst res = isPositiveP(100);\r\n\r\nres.then((result) => {\r\n  console.log(\"작업 성공 : \", result);\r\n})\r\n.catch((error)=>{\r\n  console.log(\"작업 실패 : \", error);\r\n})\r\n\r\n// 2.2 promise를 이용하여 앞선 task의 콜백지옥 해결\r\n// function taskA(a, b, cb){\r\n//   setTimeout(() => {\r\n//     const result = a + b;\r\n//     cb(result);\r\n//   }, 3000);\r\n// }\r\n// function taskB(a, cb){\r\n//   setTimeout(() => {\r\n//     const result = a * a;\r\n//     cb(result);\r\n//   }, 1000);\r\n// }\r\n// function taskC(a, b, cb){\r\n//   setTimeout(() => {\r\n//     const result = a - b;\r\n//     cb(result);\r\n//   }, 2000);\r\n// }\r\n\r\n// taskA(5, 4, (a_result)=>{\r\n//   console.log(\"taskA 결과 값 : \", a_result);\r\n//   taskB(a_result, (b_result)=>{\r\n//     console.log(\"taskB 결과 값 : \", b_result);\r\n//     taskC(a_result, b_result, (c_result) => {\r\n//       console.log(\"taskC 결과 값 : \", c_result)\r\n//     })\r\n//   })\r\n// })\r\n\r\n//위의 코드를 promise로 표현\r\nfunction promiseTaskA(a, b){\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const result = a + b;\r\n      resolve(result);\r\n    }, 3000);\r\n  })\r\n}\r\nfunction promiseTaskB(a){\r\n  return new Promise((resolve, reject) =>{\r\n    setTimeout(() => {\r\n      const result = a * a;\r\n      resolve(result);\r\n    }, 1000);\r\n  })\r\n}\r\nfunction promiseTaskC(a){\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const result = a * -1;\r\n      resolve(result);\r\n    }, 2000);\r\n  });\r\n}\r\n\r\npromiseTaskA(10,4)\r\n  .then((a_result)=>{\r\n    console.log(\"A RESULT : \", a_result);\r\n    return promiseTaskB(a_result);\r\n  })\r\n  .then((b_result)=>{\r\n    console.log(\"B RESULT : \", b_result);\r\n    return promiseTaskC(b_result);\r\n  })\r\n  .then((c_result) => {\r\n    console.log(\"C RESULT : \", c_result);\r\n  })\r\n\r\n\r\n// promise를 변수에 넣어 사용할수도 있습니다.\r\n// const promiseResult = promiseTaskA(10,4)\r\n//   .then((a_result)=>{\r\n//     console.log(\"A RESULT : \", a_result);\r\n//     return promiseTaskB(a_result);\r\n//   });\r\n\r\n// console.log(\"중간에 다른 코드를 넣을 수 있습니다.\")  \r\n\r\n// promiseResult  \r\n//   .then((b_result)=>{\r\n//     console.log(\"B RESULT : \", b_result);\r\n//     return promiseTaskC(b_result);\r\n//   })\r\n//   .then((c_result) => {\r\n//     console.log(\"C RESULT : \", c_result);\r\n//   })\r\n\r\n\r\n// 3. async & await : promise를 더 쉽게 사용할 문법\r\nasync function helloAsync(){\r\n  return \"안녕하세요 Async!\";\r\n}\r\nconsole.log(helloAsync);  // Promise{pendding} => async를 사용하면 자동적으로 promise를 대기상태로 return \r\n// 즉, promise를 사용하는 구조인 then을 사용가능\r\nhelloAsync().then((res) => {\r\n  console.log(res);\r\n})\r\n\r\nfunction delay(ms){\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve();\r\n    }, ms);\r\n  })\r\n}\r\n\r\n// async function delayedAsync() {\r\n//   return delay(3000).then(() => {\r\n//     return \"3초 delay\"\r\n//   });\r\n// }\r\n\r\n// 위 코드를 async & await으로 사용가능\r\n// await을 붙히면 코드가 동기적으로 실행됨 (await delay가 끝날때까지 기다렸다가 return \"3초 delay\" 수행)\r\nasync function delayedAsync(){\r\n  await delay(3000);\r\n  return \"3초 delay(await 사용)\";\r\n}\r\n\r\n// delayedAsync().then((res) => {\r\n//   console.log(res);\r\n// })\r\n\r\n// 위에서 then을 사용한 호출도 async & await으로 동기적 호출이 가능\r\nasync function main(){\r\n  const res = await delayedAsync();\r\n  console.log(res);\r\n}\r\n\r\nmain();"],"names":[],"version":3,"file":"index.493c8215.js.map","sourceRoot":"/__parcel_source_root/"}