{"mappings":"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","sources":["Documents/ES6_practice/js/built-in-function.js"],"sourcesContent":["// 1. forEach : 배열을 순회하는 간단한 내장함수\r\nconst array = ['a', 'b', 'c', 'd'];\r\n\r\narray.forEach((param) => console.log(param));\r\n// 아래 for문과 같은 역할을 함\r\n// for (let i = 0; i < array.length; i++){\r\n//   console.log(array[i]);\r\n// }\r\n\r\n// 또한 배열 메서드 (push, pop, shift 등을 사용할 수도 있음)\r\nconst newArray = [];\r\narray.forEach((param) => newArray.push(param + param));\r\nconsole.log(newArray);  // ['aa', 'bb', 'cc', 'dd']\r\n\r\n// 2. map : 원본 배열을 순환하며 각각 모든 요소마다 콜백함수를 실행하고 return값을 반환\r\n// foreach와 비슷하지만 return을 반환한다는 차이가 있음\r\nconst newArray2 = array.map((param) => {return param + param + param;})\r\nconsole.log(newArray2); // ['aaa', 'bbb', 'ccc', 'ddd']\r\n\r\n// 3. includes : 임의의 값이 주어진 배열에 존재하는지 판단\r\nlet str = \"b\";\r\n\r\nconsole.log(array.includes(str));\r\n\r\n// 4. indexOf : 임의의 값이 주어진 배열의 몇번째에 존재하는지 반환. (없으면 -1)\r\n// indexOf가 첫번째값 즉, 0을 반환시 False처리가 되는 경우가 있어 이를 보완하기 위해 includes가 등장함\r\nconsole.log(array.indexOf(str));    // 1\r\n\r\n// 5. findIndex : 조건에 맞는 배열의 인덱스 번호를 반환\r\nconst arrObj = [\r\n  {color : \"red\"},\r\n  {color : \"blue\"},\r\n  {color : \"green\"},\r\n  {color : \"pink\"},\r\n  {color : \"blue\"}\r\n]\r\n\r\nconsole.log(arrObj.findIndex((value) => {   // 3\r\n  return value.color === \"pink\";\r\n}));\r\n\r\n// 6. find : 조건에 맞는 배열의 요소를 반환\r\nconsole.log(arrObj.find((value) => {   // {color : pink}\r\n  return value.color === \"pink\";\r\n}));\r\n\r\n// 7. filter : 조건에 따라 배열내에서 true를 반환하는 모든 요소 반환\r\nconsole.log(arrObj.filter((value) => value.color === \"blue\"))\r\n\r\n// 8. slice : 조건에 맞게 배열의 요소를 자르는 메서드\r\nconsole.log(arrObj.slice(0,3));\r\n\r\n// 9. concat : 두개의 배열을 합치는 메서드\r\nconsole.log(array.concat(arrObj));\r\n\r\n// 10. sort : 원본 배열의 순서를 사전순으로 정렬\r\nconst engs = ['d', 'e', 'a', 'c', 'b'];\r\nengs.sort();\r\nconsole.log(engs);  //['a', 'b', 'c', 'd', 'e']\r\n\r\n// 하지만 숫자를 정렬할 시 숫자를 문자로 취급하여 1, 12, 2, 233, 3 처럼 정렬함 \r\nconst numbers = [3,124,23,5,46,345,32,12,3,41,24,2];\r\n// numbers.sort();\r\n// console.log(numbers); //[12, 124, 2, 23, 24, 3, 3, 32, 345, 41, 46, 5]\r\n// 때문에 비교함수를 만드는 사전 작업이 필요함\r\nconst compare = (num1 , num2) => {\r\n  if (num1 > num2){\r\n    // numb1 이 num2 보다 작으면 num1을 num2보다 뒤로 보냄\r\n    return 1;   // -1을 넣고 num1 < num2 일때 1을 넣으면 내림차숨\r\n  };\r\n  if (num1 < num2){\r\n    // numb1 이 num2 보다 크다면 num1을 num2보다 앞으로 보냄\r\n    return -1;\r\n  };\r\n  return 0;\r\n};\r\nnumbers.sort(compare);\r\nconsole.log(numbers);   //[2, 3, 3, 5, 12, 23, 24, 32, 41, 46, 124, 345]\r\n\r\n\r\n// 11. join : 배열의 값을 이어서 출력해주는 메서드\r\nconst strings = [\"안녕하세요\", \"자바스크립트\", \"es6\", \"이후\", \"공부중입니다.\"];\r\n\r\nconsole.log(strings.join(\" \"));\r\n"],"names":[],"version":3,"file":"index.aa4989aa.js.map","sourceRoot":"/__parcel_source_root/"}